{"version":3,"file":"static/js/103.ddd8c2b0.chunk.js","mappings":"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","sources":["components/CalendarPage/CalendarGrid/CalendarGrid.styled.js","components/CalendarPage/CalendarGrid/CalendarGrid.js","components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.styled.js","components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.js","components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.js","components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator.js","components/CalendarPage/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.js","components/CalendarPage/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js","components/CalendarPage/ChoosedDay/AddTaskBtn/AddTaskBtn.styled.js","components/CalendarPage/ChoosedDay/AddTaskBtn/AddTaskBtn.js","components/CalendarPage/ChoosedDay/DayCalendarHead /DayCalendarHead.styled.js","components/CalendarPage/ChoosedDay/DayCalendarHead /DayCalendarHead.js","components/CalendarPage/ChoosedDay/TasksColumnsList/TasksColumnsList.styled.js","components/CalendarPage/ChoosedDay/ColumnHeadBar/ColumnHeadBar.styled.js","components/CalendarPage/ChoosedDay/ColumnHeadBar/ColumnHeadBar.js","components/CalendarPage/ChoosedDay/TaskToolbar/TaskToolbar.styled.js","components/CalendarPage/ChoosedDay/TaskToolbar/TaskToolbar.js","redux/tasks/selectors.js","components/CalendarPage/ChoosedDay/TaskColumnCard/TaskColumnCard.styled.js","components/CalendarPage/ChoosedDay/TaskColumnCard/TaskColumnCard.js","components/CalendarPage/ChoosedDay/ColumnsTasksList/ColumnsTasksList.styled.js","components/CalendarPage/ChoosedDay/ColumnsTasksList/ColumnsTasksList.js","components/CalendarPage/ChoosedDay/TasksColumn/TasksColumn.styled.js","components/CalendarPage/ChoosedDay/TasksColumn/TasksColumn.js","components/CalendarPage/ChoosedDay/TasksColumnsList/TasksColumnsList.js","components/CalendarPage/ChoosedDay/ChoosedDay/ChoosedDay.js","components/CalendarPage/WeekdayHeader/WeekdayHeader.styled.js","components/CalendarPage/WeekdayHeader/WeekdayHeader.js","pages/CalendarPage.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const GridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(5, 1fr);\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  border-radius: 8px;\n  background-color: white;\n\n  @media (max-width: 375px) {\n    grid-template-columns: repeat(7, minmax(0, 1fr));\n    max-width: 335px;\n    height: 470px;\n    border-radius: 8px;\n    background-color: white;\n  }\n\n  @media (min-width: 376px) and (max-width: 768px) {\n    max-width: 704px;\n    height: 720px;\n    border-radius: 8px;\n    background-color: white;\n  }\n  @media (min-width: 769px) and (max-width: 1440px) {\n    max-width: 1087px;\n    height: 625px;\n    border-radius: 8px;\n    background-color: white;\n  }\n`;\n\nexport const CellWrapper = styled.div`\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  padding-top: 8px;\n  padding-right: 4px;\n\n  @media (max-width: 375px) {\n    padding-top: 8px;\n    padding: 4 px;\n  }\n  @media (min-width: 376px) and (max-width: 768px) {\n    padding-top: 14px;\n    padding-right: 4px;\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n    padding-top: 14px;\n    padding: 14px;\n  }\n`;\nexport const RowInCell = styled.div`\n  display: flex;\n  justify-content: ${props =>\n    props.justifyContent ? props.justifyContent : 'flex-end'};\n  align-items: center;\n\n  @media (max-width: 375px) {\n  }\n\n  @media (min-width: 376px) and (max-width: 768px) {\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n  }\n`;\n\nexport const DayWrapper = styled.div`\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 14px;\n  letter-spacing: 0em;\n  text-align: center;\n  padding: 4px 6px;\n\n  color: ${props => (props.$today ? '#FFFFFF' : '#343434')};\n  background-color: ${props => (props.$today ? '#3E85F3' : 'transparent')};\n  border-radius: ${props => (props.$today ? '6px' : '0')};\n\n  @media (max-width: 375px) {\n    font-size: 12px;\n    font-weight: 700;\n    line-height: 14px;\n    letter-spacing: 0em;\n    text-align: center;\n    text-transform: uppercase;\n    padding: 4px 6px;\n    color: ${props => (props.$today ? '#FFFFFF' : '#343434')};\n    background-color: ${props => (props.$today ? '#3E85F3' : 'transparent')};\n    border-radius: ${props => (props.$today ? '6px' : '0')};\n  }\n  @media (min-width: 376px) and (max-width: 768px) {\n    padding: 4px 8px;\n    color: #343434;\n    font-family: Inter;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    color: ${props => (props.$today ? '#FFFFFF' : '#343434')};\n    background-color: ${props => (props.$today ? '#3E85F3' : 'transparent')};\n    border-radius: ${props => (props.$today ? '8px' : '0')};\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n    padding: 4px 8px;\n    color: #343434;\n    font-family: Inter;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n    color: ${props => (props.$today ? '#FFFFFF' : '#343434')};\n    background-color: ${props => (props.$today ? '#3E85F3' : 'transparent')};\n    border-radius: ${props => (props.$today ? '8px' : '0')};\n  }\n`;\n","import React from 'react';\nimport moment from 'moment';\n\nimport {\n  GridWrapper,\n  CellWrapper,\n  RowInCell,\n  DayWrapper,\n} from './CalendarGrid.styled';\n\nconst CalendarPage = ({ startDay }) => {\n  const currentDate = moment();\n  const firstDayOfCurrentMonth = currentDate.clone().startOf('month');\n  const lastDayOfCurrentMonth = currentDate.clone().endOf('month');\n\n  const daysArray = [];\n  let currentDay = startDay.clone();\n\n  if (currentDay.day() === 0) {\n    currentDay.add(1, 'day');\n  }\n\n  let isCurrentMonth = false;\n\n  for (let i = 0; i < 35; i++) {\n    if (currentDay.isSame(firstDayOfCurrentMonth, 'day')) {\n      isCurrentMonth = true;\n    }\n\n    if (\n      !isCurrentMonth ||\n      currentDay.isSameOrBefore(lastDayOfCurrentMonth, 'day')\n    ) {\n      daysArray.push({\n        day: isCurrentMonth ? currentDay.clone() : null,\n        isCurrentMonth: isCurrentMonth,\n      });\n    }\n\n    if (isCurrentMonth && currentDay.isSame(lastDayOfCurrentMonth, 'day')) {\n      break;\n    }\n\n    currentDay.add(1, 'day');\n  }\n\n  while (daysArray.length < 35) {\n    daysArray.push({\n      day: null,\n      isCurrentMonth: false,\n    });\n  }\n\n  return (\n    <div>\n      <GridWrapper>\n        {daysArray.map(({ day, isCurrentMonth }, i) => (\n          <CellWrapper key={day ? day.format('DDMMYYYY') : `empty-${i}`}>\n            <RowInCell>\n              <DayWrapper\n                className={isCurrentMonth ? 'current-month' : ''}\n                $today={day && day.isSame(currentDate, 'day')}\n              >\n                {day ? day.format('D') : ''}\n              </DayWrapper>\n            </RowInCell>\n          </CellWrapper>\n        ))}\n      </GridWrapper>\n    </div>\n  );\n};\n\nexport default CalendarPage;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 32px;\n`;\n\nexport const ContainerSecond = styled.div`\n  display: flex;\n`;\n","import { useState } from 'react';\nimport { Routes, Route, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { PeriodPaginator, PeriodTypeSelect } from '../../index';\nimport { Container, ContainerSecond } from './CalendarToolbar.styled';\n// import { fetchTasks } from '../../../../redux/tasks/operations';\n\nconst CalendarToolbar = () => {\n  const dateGlobal = useSelector(state => state.date.currentDate);\n  const [date, setDate] = useState(dateGlobal);\n  const location = useLocation();\n  console.log(location);\n\n  // const dispatch = useDispatch();\n\n  // const formatDateForFetch = date => {\n  //   const parts = date.split('-');\n  //   const year = parseInt(parts[0]);\n  //   const month = parseInt(parts[1]) - 1;\n\n  //   const firstDayOfMonth = new Date(year, month, 1);\n  //   const lastDayOfMonth = new Date(year, month + 1, 0);\n\n  //   const formattedFirstDay = `${year}-${(month + 1)\n  //     .toString()\n  //     .padStart(2, '0')}-01`;\n  //   const formattedLastDay = `${year}-${(month + 1)\n  //     .toString()\n  //     .padStart(2, '0')}-${lastDayOfMonth\n  //     .getDate()\n  //     .toString()\n  //     .padStart(2, '0')}`;\n\n  //   console.log({\n  //     monthStart: formattedFirstDay,\n  //     monthEnd: formattedLastDay,\n  //   });\n\n  //   return {\n  //     monthStart: formattedFirstDay,\n  //     monthEnd: formattedLastDay,\n  //   };\n  // };\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  //   //  // formatDateForFetch(date); а потом записать их в selectTasks??\n  // }, [date, dateGlobal]);\n\n  const changeDate = e => {\n    const newDate = new Date(date);\n\n    if (location.pathname === '/calendar/day') {\n      if (e.currentTarget.className === 'sc-gJiVIX') {\n        newDate.setDate(newDate.getDate() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 1);\n      }\n\n      setDate(newDate);\n    } else {\n      if (e.currentTarget.className === 'sc-gJiVIX') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setMonth(newDate.getMonth() + 1);\n      }\n\n      setDate(newDate);\n    }\n  };\n\n  const formatDateString = inputDate => {\n    if (location.pathname === '/calendar/day') {\n      const parsedDate = new Date(inputDate);\n      const options = { day: 'numeric', month: 'short', year: 'numeric' };\n      const formattedDate = parsedDate.toLocaleDateString('en-GB', options);\n      return formattedDate.replace(\n        parsedDate.toLocaleString('en-GB', { month: 'short' }),\n        parsedDate.toLocaleString('en-GB', { month: 'short' }).toUpperCase()\n      );\n    }\n    const parsedDate = new Date(inputDate);\n    const options = { month: 'short', year: 'numeric' };\n    const formattedDate = parsedDate.toLocaleDateString('en-GB', options);\n    const monthUpperCase = formattedDate.split(' ')[0].toUpperCase();\n    const year = formattedDate.split(' ')[1];\n    return `${monthUpperCase} ${year}`;\n  };\n\n  const formattedDate = formatDateString(date);\n\n  return (\n    <>\n      <Container>\n        <ContainerSecond>\n          <PeriodPaginator date={formattedDate} getTasks={changeDate} />\n        </ContainerSecond>\n        <div>\n          <PeriodTypeSelect />\n        </div>\n      </Container>\n      <Routes>\n        <Route path=\"/calendar/month\" element={<div>day</div>} />\n        <Route path=\"/calendar/day\" element={<div>month</div>} />\n      </Routes>\n    </>\n  );\n};\nexport default CalendarToolbar;\n","import styled from 'styled-components';\n\nexport const Date = styled.p`\n  display: flex;\n  align-items: center;\n  margin-right: 8px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  width: 131px;\n  height: 34px;\n  border-radius: 8px;\n  padding: 8px 12px 8px 12px;\n`;\nexport const ButtonIncrease = styled.button``;\n\nexport const ButtonDecrease = styled.button``;\n\nexport const Icon = styled.svg``;\n","import {\n  Date,\n  ButtonIncrease,\n  ButtonDecrease,\n  Icon,\n} from './PeriodPaginator.styled';\nimport icon from 'assets/icons/symbol-defs.svg';\n\nconst PeriodPaginator = ({ date, getTasks }) => {\n  // const formatDate = month || date;\n\n  return (\n    <>\n      <Date>{date}</Date>\n      <ButtonIncrease onClick={getTasks}>\n        <Icon width=\"18\" height=\"18\">\n          <use href={icon + '#icon-chevron-left'}></use>\n        </Icon>\n      </ButtonIncrease>\n      <ButtonDecrease onClick={getTasks}>\n        <svg width=\"18\" height=\"18\">\n          <use href={icon + '#icon-chevron-right'}></use>\n        </svg>\n      </ButtonDecrease>\n    </>\n  );\n};\nexport default PeriodPaginator;\n","import styled from 'styled-components';\n\nexport const ButtonMonth = styled.button`\n  display: inline-flex;\n  align-items: center;\n  width: 82px;\n  height: 34px;\n  border-radius: 8px 0px 0px 8px;\n  padding: 8px 26px 8px 26px;\n  background-color: #e3f3ff;\n  border-color: transparent;\n  color: #3e85f3;\n`;\nexport const ButtonDay = styled.button`\n  display: inline-flex;\n  align-items: center;\n  width: 82px;\n  height: 34px;\n  border-radius: 0px 8px 8px 0px;\n  padding: 8px 26px 8px 26px;\n  background-color: #e3f3ff;\n  border-color: transparent;\n  color: #3e85f3;\n`;\n","import { useNavigate } from 'react-router-dom';\nimport { ButtonMonth, ButtonDay } from './PeriodTypeSelect.styled';\n\nconst PeriodTypeSelect = () => {\n  const navigate = useNavigate();\n\n  const toMonth = () => {\n    // какой маршрут??????\n    navigate('/calendar/month');\n  };\n  const toDay = () => {\n    // какой маршрут??????\n    navigate('/calendar/day');\n  };\n  return (\n    <>\n      <ButtonMonth onClick={toMonth}>Month</ButtonMonth>\n      <ButtonDay onClick={toDay}>Day</ButtonDay>\n    </>\n  );\n};\nexport default PeriodTypeSelect;\n","import { styled } from 'styled-components';\n\nexport const Button = styled.button`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 16px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.28;\n  color: ${p => p.theme.mainTextColor};\n  background-color: ${p => p.theme.secondaryAccentColorActive};\n  border-radius: 16px;\n  border-radius: 8px;\n  border: 1px dashed ${p => p.theme.sidebarMainActiveColor};\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n\n  &:hover {\n    background-color: #CAE8FF;\n  }\n`;\n\nexport const Icon = styled.svg`\n  stroke: currentColor;\n`;","import icon from \"assets/icons/symbol-defs.svg\";\nimport { Button, Icon } from \"./AddTaskBtn.styled\";\n\nconst AddTaskBtn = () => {\n  return (\n    <Button>\n      <Icon width=\"24\" height=\"24\">\n        <use href={icon + \"#icon-plus\"}></use>\n      </Icon>\n      <span>Add task</span>\n    </Button>\n  );\n};\nexport default AddTaskBtn;\n","import { styled } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.50);\n  background-color: ${p => p.theme.secondaryBgColor};\n`;","import React from 'react'\nimport { Wrapper } from './DayCalendarHead.styled';\n\nconst DayCalendarHead = () => {\n  return (\n    <Wrapper>DayCalendarHead</Wrapper>\n  )\n}\n\nexport default DayCalendarHead;","import { styled } from 'styled-components';\nimport { device } from 'constants';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 16px;\n  overflow-y: scroll;\n\n  @media screen and (min-width: ${device.desktop}px) {\n    gap: 27px;\n  }\n`;","import { styled } from 'styled-components';\nimport { device } from 'constants';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Title = styled.h3`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 1.11;\n  color: #111;\n\n  @media screen and (min-width: ${device.tablet}px) {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  background-color: transparent;\n  border: none;\n\n  &:hover svg {\n    stroke: ${p => p.theme.mainAccentColorActive};\n  }\n`;\n\nexport const Icon = styled.svg`\n  fill: none;\n  stroke: currentColor;\n  transition: stroke 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;","import { Button, Icon, Title, Wrapper } from \"./ColumnHeadBar.styled\";\nimport icon from \"assets/icons/symbol-defs.svg\";\n\nconst ColumnHeadBar = ({ title, category }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Button aria-label=\"Add new task\">\n        <Icon width=\"22\" height=\"22\">\n          <use href={icon + \"#icon-plus-in-a-circle\"}></use>\n        </Icon>\n      </Button>\n    </Wrapper>\n  );\n};\nexport default ColumnHeadBar;\n\n// props category = \"to-do\", \"in-progress\", \"done\"","import { styled } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: end;\n`;\n\nexport const Button = styled.button`\n  padding: 0;\n  background-color: transparent;\n  border: none;\n\n  &:hover svg {\n    stroke: ${p => p.theme.mainAccentColorActive};\n  }\n`;\n\nexport const Icon = styled.svg`\n  fill: none;\n  stroke: currentColor;\n  transition: stroke 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n","import icon from 'assets/icons/symbol-defs.svg';\nimport { Wrapper, Button, Icon } from './TaskToolbar.styled';\n\nconst TaskToolbar = () => {\n  return (\n    <Wrapper>\n      <Button>\n        <Icon width=\"14\" height=\"14\">\n          <use href={icon + \"#icon-arrow-circle-broken-right\"}></use>\n        </Icon>\n      </Button>\n      <Button>\n        <Icon width=\"14\" height=\"14\">\n          <use href={icon + \"#icon-pencil-01\"}></use>\n        </Icon>\n      </Button>\n      <Button>\n        <Icon width=\"14\" height=\"14\">\n          <use href={icon + \"#icon-trash-04\"}></use>\n        </Icon>\n      </Button>\n    </Wrapper>\n  );\n};\nexport default TaskToolbar;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectTasks = state => state.tasks.tasks;\nexport const selectAvatarURL = state => state.tasks.avatarURL;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n\nexport const selectTasksByCategory = createSelector(\n  selectTasks,\n  (_, category) => category,\n  (tasks, category) => tasks.filter(task => task.category === category)\n);\n","import { styled } from 'styled-components';\nimport { device } from 'constants';\n\nexport const Wrapper = styled.div`\n  padding-top: 14px;\n  padding-right: 14px;\n  padding-bottom: 18px;\n  padding-left: 14px;\n  border-radius: 8px;\n  background-color: ${p => p.theme.mainBGColor};\n`;\n\nexport const Title = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.28;\n`;\n\nexport const CardFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 28px;\n\n  @media screen and (min-width: ${device.tablet}px) {\n    margin-top: 32px;\n  }\n`;\n\nexport const AvatarWrapper = styled.div`\n  display: flex;\n  align-items: end;\n  gap: 8px;\n`;\n\nexport const AvatarImage = styled.img`\n  border-radius: 32px;\n  border: 1.8px solid ${p => p.theme.mainAccentColor};\n`;\n\nexport const Badge = styled.span`\n  padding: 4px 12px;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 1.2;\n  color:  ${p => p.theme.mainBGColor};\n  background-color: #72C2F8;\n  border-radius: 4px;\n`;","import { useSelector } from \"react-redux\";\nimport TaskToolbar from \"../TaskToolbar/TaskToolbar\";\nimport { TaskModal } from \"components/Common\";\nimport { selectAvatarURL } from \"redux/tasks/selectors\";\nimport { Wrapper, Title, CardFooter, AvatarWrapper, AvatarImage, Badge } from \"./TaskColumnCard.styled\";\n\nconst TaskColumnCard = ({ task }) => {\n  const avatar = useSelector(selectAvatarURL);\n  return (\n    <Wrapper>\n      <Title>{task.title}</Title>\n      <CardFooter>\n        <AvatarWrapper>\n          <AvatarImage src={avatar} width=\"32\" height=\"32\" alt=\"User Avatar\" />\n          <Badge>{task.priority}</Badge>\n        </AvatarWrapper>\n        <TaskToolbar />\n      </CardFooter>\n      <TaskModal />\n    </Wrapper>\n  );\n};\nexport default TaskColumnCard;\n","import { styled } from 'styled-components';\nimport { device } from 'constants';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 14px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n\n  @media screen and (min-width: ${device.desktop}px) {\n    row-gap: 18px;\n    padding-top: 28px;\n    padding-bottom: 32px;\n  }\n`;","import TaskColumnCard from \"../TaskColumnCard/TaskColumnCard\";\nimport { Wrapper } from \"./ColumnsTasksList.styled\";\n\nconst ColumnsTasksList = ({ tasks }) => {\n  return (\n    <Wrapper>\n      {tasks.map(task => (\n        <TaskColumnCard key={task._id} task={task} />\n      ))}\n    </Wrapper>\n  );\n};\nexport default ColumnsTasksList;\n","import { styled } from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  padding: 14px 18px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.50);\n  background-color: ${p => p.theme.secondaryBgColor};\n`;\n","import AddTaskBtn from \"../AddTaskBtn/AddTaskBtn\";\nimport ColumnHeadBar from \"../ColumnHeadBar/ColumnHeadBar\";\nimport ColumnsTasksList from \"../ColumnsTasksList/ColumnsTasksList\";\nimport { Wrapper } from \"./TasksColumn.styled\";\n\nconst TasksColumn = ({ title, tasks}) => {\n  return (\n    <Wrapper>\n      <ColumnHeadBar title={title} />\n      {tasks && (<ColumnsTasksList tasks={tasks} />)}\n      <AddTaskBtn />\n    </Wrapper>\n  );\n};\nexport default TasksColumn;\n","import React from 'react'\nimport { Wrapper } from './TasksColumnsList.styled';\nimport TasksColumn from '../TasksColumn/TasksColumn';\nimport { useSelector } from 'react-redux';\nimport { selectTasksByCategory } from 'redux/tasks/selectors';\nimport { category } from 'constants';\n\nconst TasksColumnsList = () => {\n  const tasksToDo = useSelector(state =>\n    selectTasksByCategory(state, category.toDo)\n  );\n\n  const tasksInProgress = useSelector(state =>\n    selectTasksByCategory(state, category.inProgress)\n  );\n\n  const tasksDone = useSelector(state =>\n    selectTasksByCategory(state, category.done)\n  );\n\n  return (\n    <Wrapper>\n      <TasksColumn title=\"To do\" tasks={tasksToDo} />\n      <TasksColumn title=\"In progress\" tasks={tasksInProgress} />\n      <TasksColumn title=\"Done\" tasks={tasksDone} />\n    </Wrapper>\n  )\n}\n\nexport default TasksColumnsList;","import DayCalendarHead from \"../DayCalendarHead /DayCalendarHead\";\nimport TasksColumnsList from \"../TasksColumnsList/TasksColumnsList\";\n\nconst ChoosedDay = () => {\n  return (\n    <>\n      <DayCalendarHead />\n      <TasksColumnsList />\n    </>\n  );\n};\nexport default ChoosedDay;\n","import styled from 'styled-components';\nexport const LargeWeekday = styled.div`\n  color: ${props => (props.$weekend ? '#3E85F3' : '#343434')};\n\n  @media (max-width: 375px) {\n    font-family: Inter;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 14px;\n    text-transform: uppercase;\n  }\n\n  @media (min-width: 376px) and (max-width: 768px) {\n    font-family: Inter;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n    font-family: Inter;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n  }\n`;\n\nexport const SmallWeekday = styled.div`\n  color: ${props => (props.$weekend ? '#3E85F3' : '#343434')};\n  font-family: Inter;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n  text-transform: uppercase;\n\n  @media (max-width: 375px) {\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    text-transform: uppercase;\n  }\n\n  @media (min-width: 376px) and (max-width: 768px) {\n    font-family: Inter;\n    font-size: 16px;\n    font-weight: 600;\n    line-height: 18px;\n    letter-spacing: 0em;\n    text-align: center;\n    text-transform: uppercase;\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n    font-family: Inter;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: 700;\n    line-height: 18px;\n    text-transform: uppercase;\n  }\n`;\n\nexport const WeekWrapper = styled.div`\n  @media (max-width: 375px) {\n    display: flex;\n    justify-content: space-around;\n    border: 1px solid rgba(220, 227, 229, 0.5);\n    border-radius: 8px;\n    background-color: white;\n    max-width: 335px;\n    padding: 16px;\n    margin-bottom: 14px;\n  }\n\n  @media (min-width: 376px) and (max-width: 768px) {\n    display: flex;\n    justify-content: space-around;\n    border: 1px solid rgba(220, 227, 229, 0.5);\n    border-radius: 8px;\n    background-color: white;\n    max-width: 704px;\n    padding-top: 14px;\n    padding-bottom: 14px;\n    padding-left: 40px;\n    padding-right: 40px;\n    margin-bottom: 18px;\n  }\n\n  @media (min-width: 769px) and (max-width: 1440px) {\n    display: flex;\n    justify-content: space-between;\n    border: 1px solid rgba(220, 227, 229, 0.5);\n    border-radius: 8px;\n    background-color: white;\n    max-width: 1087px;\n    padding-top: 14px;\n    padding-bottom: 14px;\n    padding-left: 60px;\n    padding-right: 60px;\n    margin-bottom: 15px;\n  }\n`;\n","import React from 'react';\nimport { LargeWeekday, WeekWrapper } from './WeekdayHeader.styled';\nimport { useMediaQuery } from 'react-responsive';\n\nconst WeekdayHeader = () => {\n  const isTabletOrDesktop = useMediaQuery({ minWidth: 376 });\n\n  return (\n    <WeekWrapper>\n      <LargeWeekday $weekend={false}>\n        {isTabletOrDesktop ? 'mon' : 'm'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={false}>\n        {isTabletOrDesktop ? 'tue' : 't'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={false}>\n        {isTabletOrDesktop ? 'wed' : 'w'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={false}>\n        {isTabletOrDesktop ? 'thu' : 't'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={false}>\n        {isTabletOrDesktop ? 'fri' : 'f'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={true}>\n        {isTabletOrDesktop ? 'sat' : 's'}\n      </LargeWeekday>\n      <LargeWeekday $weekend={true}>\n        {isTabletOrDesktop ? 'sun' : 's'}\n      </LargeWeekday>\n    </WeekWrapper>\n  );\n};\n\nexport default WeekdayHeader;\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { fetchTasks } from 'redux/tasks/operations';\nimport { ChoosedDay } from 'components/CalendarPage';\nimport { Section } from 'components/Common';\nimport { CalendarGrid, CalendarToolbar, WeekdayHeader } from '../components/CalendarPage/index';\nimport React from 'react';\nimport moment from 'moment';\n\nconst CalendarPage = () => {\n\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks({\n  //     monthStart: \"2023-08-01\",\n  //     monthEnd: \"2023-08-31\"\n  //   }));\n  // }, [dispatch]);\n\n  return (\n    <>\n      <CalendarToolbar />\n      <Section>\n        <Section>\n          <WeekdayHeader />\n          <CalendarGrid startDay={startDay} />\n        </Section>\n        <ChoosedDay />\n      </Section>\n    </>\n  )\n};\nconst startDay = moment().startOf('month').startOf('week');\n\nexport default CalendarPage;\n"],"names":["GridWrapper","styled","_templateObject","_taggedTemplateLiteral","CellWrapper","_templateObject2","RowInCell","_templateObject3","props","justifyContent","DayWrapper","_templateObject4","$today","_ref","startDay","currentDate","moment","firstDayOfCurrentMonth","clone","startOf","lastDayOfCurrentMonth","endOf","daysArray","currentDay","day","add","isCurrentMonth","i","isSame","isSameOrBefore","push","length","_jsx","children","map","_ref2","className","format","concat","Container","ContainerSecond","dateGlobal","useSelector","state","date","_useState","useState","_useState2","_slicedToArray","setDate","location","useLocation","console","log","formattedDate","inputDate","pathname","parsedDate","Date","toLocaleDateString","month","year","replace","toLocaleString","toUpperCase","monthUpperCase","split","formatDateString","_jsxs","_Fragment","PeriodPaginator","getTasks","e","newDate","currentTarget","getDate","setMonth","getMonth","PeriodTypeSelect","Routes","Route","path","element","ButtonIncrease","ButtonDecrease","Icon","onClick","width","height","href","icon","ButtonMonth","ButtonDay","navigate","useNavigate","Button","p","theme","mainTextColor","secondaryAccentColorActive","sidebarMainActiveColor","Wrapper","secondaryBgColor","device","Title","mainAccentColorActive","title","category","selectAvatarURL","tasks","avatarURL","selectTasksByCategory","createSelector","_","filter","task","mainBGColor","CardFooter","AvatarWrapper","AvatarImage","_templateObject5","mainAccentColor","Badge","_templateObject6","avatar","src","alt","priority","TaskToolbar","TaskModal","TaskColumnCard","_id","ColumnHeadBar","ColumnsTasksList","AddTaskBtn","tasksToDo","tasksInProgress","tasksDone","TasksColumn","DayCalendarHead","TasksColumnsList","LargeWeekday","$weekend","WeekWrapper","isTabletOrDesktop","useMediaQuery","minWidth","CalendarToolbar","Section","WeekdayHeader","CalendarGrid","ChoosedDay"],"sourceRoot":""}