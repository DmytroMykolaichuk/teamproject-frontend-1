{"version":3,"file":"static/js/197.17838437.chunk.js","mappings":"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","sources":["components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.styled.js","components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.js","components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.js","components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator.js","components/CalendarPage/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.js","components/CalendarPage/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js","pages/CalendarPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 32px;\n`;\n\nexport const ContainerSecond = styled.div`\n  display: flex;\n`;\n","import { useState } from 'react';\nimport { Routes, Route, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { PeriodPaginator, PeriodTypeSelect } from '../../index';\nimport { Container, ContainerSecond } from './CalendarToolbar.styled';\n// import { fetchTasks } from '../../../../redux/tasks/operations';\n\nconst CalendarToolbar = () => {\n  const dateGlobal = useSelector(state => state.date.currentDate);\n  const [date, setDate] = useState(dateGlobal);\n  const location = useLocation();\n  console.log(location);\n\n  // const dispatch = useDispatch();\n\n  // const formatDateForFetch = date => {\n  //   const parts = date.split('-');\n  //   const year = parseInt(parts[0]);\n  //   const month = parseInt(parts[1]) - 1;\n\n  //   const firstDayOfMonth = new Date(year, month, 1);\n  //   const lastDayOfMonth = new Date(year, month + 1, 0);\n\n  //   const formattedFirstDay = `${year}-${(month + 1)\n  //     .toString()\n  //     .padStart(2, '0')}-01`;\n  //   const formattedLastDay = `${year}-${(month + 1)\n  //     .toString()\n  //     .padStart(2, '0')}-${lastDayOfMonth\n  //     .getDate()\n  //     .toString()\n  //     .padStart(2, '0')}`;\n\n  //   console.log({\n  //     monthStart: formattedFirstDay,\n  //     monthEnd: formattedLastDay,\n  //   });\n\n  //   return {\n  //     monthStart: formattedFirstDay,\n  //     monthEnd: formattedLastDay,\n  //   };\n  // };\n\n  // useEffect(() => {\n  //   dispatch(fetchTasks());\n  //   //  // formatDateForFetch(date); а потом записать их в selectTasks??\n  // }, [date, dateGlobal]);\n\n  const changeDate = e => {\n    const newDate = new Date(date);\n\n    if (location.pathname === '/calendar/day') {\n      if (e.currentTarget.className === 'sc-gJiVIX') {\n        newDate.setDate(newDate.getDate() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 1);\n      }\n\n      setDate(newDate);\n    } else {\n      if (e.currentTarget.className === 'sc-gJiVIX') {\n        newDate.setMonth(newDate.getMonth() - 1);\n      } else {\n        newDate.setMonth(newDate.getMonth() + 1);\n      }\n\n      setDate(newDate);\n    }\n  };\n\n  const formatDateString = inputDate => {\n    if (location.pathname === '/calendar/day') {\n      const parsedDate = new Date(inputDate);\n      const options = { day: 'numeric', month: 'short', year: 'numeric' };\n      const formattedDate = parsedDate.toLocaleDateString('en-GB', options);\n      return formattedDate.replace(\n        parsedDate.toLocaleString('en-GB', { month: 'short' }),\n        parsedDate.toLocaleString('en-GB', { month: 'short' }).toUpperCase()\n      );\n    }\n    const parsedDate = new Date(inputDate);\n    const options = { month: 'short', year: 'numeric' };\n    const formattedDate = parsedDate.toLocaleDateString('en-GB', options);\n    const monthUpperCase = formattedDate.split(' ')[0].toUpperCase();\n    const year = formattedDate.split(' ')[1];\n    return `${monthUpperCase} ${year}`;\n  };\n\n  const formattedDate = formatDateString(date);\n\n  return (\n    <>\n      <Container>\n        <ContainerSecond>\n          <PeriodPaginator date={formattedDate} getTasks={changeDate} />\n        </ContainerSecond>\n        <div>\n          <PeriodTypeSelect />\n        </div>\n      </Container>\n      <Routes>\n        <Route path=\"/calendar/month\" element={<div>day</div>} />\n        <Route path=\"/calendar/day\" element={<div>month</div>} />\n      </Routes>\n    </>\n  );\n};\nexport default CalendarToolbar;\n","import styled from 'styled-components';\n\nexport const Date = styled.p`\n  display: flex;\n  align-items: center;\n  margin-right: 8px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  width: 131px;\n  height: 34px;\n  border-radius: 8px;\n  padding: 8px 12px 8px 12px;\n`;\nexport const ButtonIncrease = styled.button``;\n\nexport const ButtonDecrease = styled.button``;\n\nexport const Icon = styled.svg``;\n","import {\n  Date,\n  ButtonIncrease,\n  ButtonDecrease,\n  Icon,\n} from './PeriodPaginator.styled';\nimport icon from 'assets/icons/symbol-defs.svg';\n\nconst PeriodPaginator = ({ date, getTasks }) => {\n  // const formatDate = month || date;\n\n  return (\n    <>\n      <Date>{date}</Date>\n      <ButtonIncrease onClick={getTasks}>\n        <Icon width=\"18\" height=\"18\">\n          <use href={icon + '#icon-chevron-left'}></use>\n        </Icon>\n      </ButtonIncrease>\n      <ButtonDecrease onClick={getTasks}>\n        <svg width=\"18\" height=\"18\">\n          <use href={icon + '#icon-chevron-right'}></use>\n        </svg>\n      </ButtonDecrease>\n    </>\n  );\n};\nexport default PeriodPaginator;\n","import styled from 'styled-components';\n\nexport const ButtonMonth = styled.button`\n  display: inline-flex;\n  align-items: center;\n  width: 82px;\n  height: 34px;\n  border-radius: 8px 0px 0px 8px;\n  padding: 8px 26px 8px 26px;\n  background-color: #e3f3ff;\n  border-color: transparent;\n  color: #3e85f3;\n`;\nexport const ButtonDay = styled.button`\n  display: inline-flex;\n  align-items: center;\n  width: 82px;\n  height: 34px;\n  border-radius: 0px 8px 8px 0px;\n  padding: 8px 26px 8px 26px;\n  background-color: #e3f3ff;\n  border-color: transparent;\n  color: #3e85f3;\n`;\n","import { useNavigate } from 'react-router-dom';\nimport { ButtonMonth, ButtonDay } from './PeriodTypeSelect.styled';\n\nconst PeriodTypeSelect = () => {\n  const navigate = useNavigate();\n\n  const toMonth = () => {\n    // какой маршрут??????\n    navigate('/calendar/month');\n  };\n  const toDay = () => {\n    // какой маршрут??????\n    navigate('/calendar/day');\n  };\n  return (\n    <>\n      <ButtonMonth onClick={toMonth}>Month</ButtonMonth>\n      <ButtonDay onClick={toDay}>Day</ButtonDay>\n    </>\n  );\n};\nexport default PeriodTypeSelect;\n","import { Section } from 'components/Common';\nimport { CalendarToolbar } from '../components/CalendarPage/index';\n\nconst CalendarPage = () => (\n  <>\n    <CalendarToolbar />\n\n    <Section>\n      <h2>CalendarPage</h2>\n      <p>\n        dfuhdkfhgfkdfjhgkjdfgdfkjghfdkjghkjdfhgkjfd dfkghdfkjghkdfjhgkjdfhgkjdf\n        gdfjghdfkjhgkjdfhgkjfdhng\n      </p>\n    </Section>\n  </>\n);\n\nexport default CalendarPage;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","ContainerSecond","_templateObject2","dateGlobal","useSelector","state","date","currentDate","_useState","useState","_useState2","_slicedToArray","setDate","location","useLocation","console","log","formattedDate","inputDate","pathname","parsedDate","Date","toLocaleDateString","day","month","year","replace","toLocaleString","toUpperCase","monthUpperCase","split","concat","formatDateString","_jsxs","_Fragment","children","_jsx","PeriodPaginator","getTasks","e","newDate","currentTarget","className","getDate","setMonth","getMonth","PeriodTypeSelect","Routes","Route","path","element","ButtonIncrease","ButtonDecrease","_templateObject3","Icon","_templateObject4","_ref","onClick","width","height","href","icon","ButtonMonth","ButtonDay","navigate","useNavigate","CalendarToolbar","Section"],"sourceRoot":""}