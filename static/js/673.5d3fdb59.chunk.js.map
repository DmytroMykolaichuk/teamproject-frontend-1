{"version":3,"file":"static/js/673.5d3fdb59.chunk.js","mappings":"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","sources":["components/StatisticsPage/StatisticsPageComponent/StatisticsPageComponent.styled.js","redux/date/selectors.js","components/StatisticsPage/StatisticsChart/StatisticsChart.styled.js","components/StatisticsPage/StatisticsChart/StatisticsChart.js","components/StatisticsPage/StatisticsLegend/StatisticsLegend.styled.js","components/StatisticsPage/StatisticsLegend/StatisticsLegend.js","components/StatisticsPage/StatisticsPageComponent/StatisticsPageComponent.js","pages/StatisticsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { device } from 'constants';\n\nexport const StatisticSection = styled.section`\n  background-color: ${p => p.theme.secondaryBgColor};\n  border-radius: 16px;\n  padding: 28px 14px 135px;\n  /* height: 100%; */\n\n  @media screen and (min-width: ${device.tablet}px) {\n    padding: 132px 32px 224px 32px;\n  }\n  @media screen and (min-width: ${device.desktop}px) {\n    padding: 134px 113px 136px;\n  }\n`;\nexport const WrapperPaginator = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 20px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: ${device.tablet}px) {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    padding-left: 32px;\n    padding-right: 32px;\n  }\n  @media screen and (min-width: ${device.desktop}px) {\n    padding-left: 40px;\n    padding-right: 40px;\n  }\n`;\n\n\n\n\n","export const selectDate = state => state.date.currentDate;\n","import styled from 'styled-components';\n\nimport { device } from 'constants';\n\n\nexport const ContainerSecondWrapper = styled.div`\n  width: 100%;\n  height: 413px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 0.8px solid ${p => p.theme.chartBorderColor};\n  color: ${p => p.theme.secondaryTextColor};\n  border-radius: 20px;\n\n  @media screen and (min-width: ${device.tablet}px) {\n    height: 424px;\n    border-radius: 29px;\n  }\n  @media screen and (min-width: ${device.desktop}px) {\n    height: 440px;\n  }\n`;\n\nexport const ContainerFirstWrapper = styled.div`\n  width: calc(100% - 28px);\n  height: calc(100% - 80px);\n \n\n  @media screen and (min-width: ${device.tablet}px) {\n    width: calc(100% - 64px);\n    height: calc(100% - 64px);\n\n    @media screen and (min-width: ${device.desktop}px) {\n      width: calc(100% - 80px);\n      height: calc(100% - 80px);\n    }\n  }\n`;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\n\nimport {\n  Bar,\n  BarChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend,\n  LabelList,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { device } from 'constants';\n\nimport { selectDate } from '../../../redux/date/selectors';\n\nimport { selectTasksByCategory } from 'redux/tasks/selectors';\nimport { category }  from '../../../constants/taskStatus';\n\nimport {\n  ContainerSecondWrapper,\n  ContainerFirstWrapper,\n} from './StatisticsChart.styled';\n\nconst StatisticsChart = () => {\n  //Дата\n  const dateStatistics = useSelector(selectDate);\n\n  // Задачи по категоріям за місяць\n  const todoByMonth = useSelector(state =>\n    selectTasksByCategory(state, category.toDo)\n  );\n  const inprogressByMonth = useSelector(state =>\n    selectTasksByCategory(state, category.inProgress)\n  );\n  const doneByMonth = useSelector(state =>\n    selectTasksByCategory(state, category.done)\n  );\n  console.log(todoByMonth);\n  // Задачи по категоріям за день\n\n  const todoByDay = todoByMonth.filter(item =>\n    item.date.includes(dateStatistics)\n  );\n  const inprogressByDay = inprogressByMonth.filter(item =>\n    item.date.includes(dateStatistics)\n  );\n  const doneByDay = doneByMonth.filter(item =>\n    item.date.includes(dateStatistics)\n  );\n\n  //кількість задач за місяць кожної категорії\n  const todoByMonthCount = todoByMonth.length || 0;\n  const inprogressByMonthCount = inprogressByMonth.length || 0;\n  const doneByMonthCount = doneByMonth.length || 0;\n\n  //кількість задач за день кожної категорії\n  const todoByDayCount = todoByDay.length || 0;\n  const inprogressByDayCount = inprogressByDay.length || 0;\n  const doneByDayCount = doneByDay.length || 0;\n\n  //кількість всього задач за місяць\n  const totalTasksByMonth =\n    todoByMonthCount + inprogressByMonthCount + doneByMonthCount;\n\n  //кількість всього задач за день\n  const totalTasksByDay =\n    todoByDayCount + inprogressByDayCount + doneByDayCount;\n\n  //відсоткове відношення задач за місяць\n  const todoByMonthPercentage =\n    totalTasksByMonth === 0\n      ? 0\n      : Number((todoByMonthCount / totalTasksByMonth) * 100).toFixed();\n\n  const inprogressByMonthPercentage =\n    totalTasksByMonth === 0\n      ? 0\n      : Number((inprogressByMonthCount / totalTasksByMonth) * 100).toFixed();\n\n  const doneByMonthPercentage =\n    totalTasksByMonth === 0\n      ? 0\n      : Number((doneByMonthCount / totalTasksByMonth) * 100).toFixed();\n\n  //відсоткове відношення задач за день\n\n  const todoByDayPercentage =\n    totalTasksByDay === 0\n      ? 0\n      : Number((todoByDayCount / totalTasksByDay) * 100).toFixed();\n\n  const inprogressByDayPercentage =\n    totalTasksByDay === 0\n      ? 0\n      : Number((inprogressByDayCount / totalTasksByDay) * 100).toFixed();\n\n  const doneByDayPercentage =\n    totalTasksByDay === 0\n      ? 0\n      : Number((doneByDayCount / totalTasksByDay) * 100).toFixed();\n\n  const data = useMemo(\n    () => [\n      {\n        name: 'To do',\n        uv: todoByDayPercentage,\n        pv: todoByMonthPercentage,\n      },\n      {\n        name: 'In Progress',\n        uv: inprogressByDayPercentage,\n        pv: inprogressByMonthPercentage,\n      },\n      {\n        name: 'Done',\n        uv: doneByDayPercentage,\n        pv: doneByMonthPercentage,\n      },\n    ],\n    [\n      todoByMonthPercentage,\n      inprogressByMonthPercentage,\n      doneByMonthPercentage,\n      todoByDayPercentage,\n      inprogressByDayPercentage,\n      doneByDayPercentage,\n    ]\n  );\n\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  let chartWidth;\n  let chartHeight;\n  let chartMaxBarSize;\n\n  let chartbarSize;\n  let chartBarGap;\n  let chartBarCategoryGap;\n\n  let chartLabelListFontSize;\n  let chartXAxisFontSiZe;\n\n  let chartLabelListlineHeight;\n\n  //в залежності від ширини екрану застосовуються відповідні стилі\n\n  switch (true) {\n    case windowWidth <= device.mobile:\n      chartWidth = 279;\n      chartHeight = 333;\n      chartbarSize = 22;\n\n      chartMaxBarSize = 243;\n      chartBarGap = 8;\n      chartBarCategoryGap = 30;\n\n      chartLabelListFontSize = 12;\n      chartXAxisFontSiZe = 12;\n      chartLabelListlineHeight = 1.33;\n      break;\n    case windowWidth <= device.tablet:\n      chartWidth = 576;\n      chartHeight = 360;\n      chartbarSize = 27;\n\n      chartMaxBarSize = 522;\n      chartBarGap = 14;\n      chartBarCategoryGap = 127;\n\n      chartLabelListFontSize = 16;\n      chartXAxisFontSiZe = 14;\n      chartLabelListlineHeight = 1.13;\n      break;\n    case windowWidth <= device.desktop:\n      chartWidth = 780;\n      chartHeight = 360;\n      chartbarSize = 27;\n\n      chartMaxBarSize = 694;\n      chartBarGap = 14;\n      chartBarCategoryGap = 170;\n\n      chartLabelListFontSize = 16;\n      chartXAxisFontSiZe = 14;\n      chartLabelListlineHeight = 1.13;\n      break;\n\n    default:\n      chartWidth = 1087;\n      chartHeight = 752;\n      chartbarSize = 22;\n\n      chartMaxBarSize = 694;\n      chartBarGap = 14;\n      chartBarCategoryGap = 170;\n\n      chartLabelListFontSize = 16;\n      chartXAxisFontSiZe = 14;\n      chartLabelListlineHeight = 1.13;\n      break;\n  }\n\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <ContainerSecondWrapper>\n      <ContainerFirstWrapper>\n        <ResponsiveContainer width={'100%'} height={'100%'}>\n          <BarChart\n            width={chartWidth}\n            height={chartHeight}\n            maxBarSize={chartMaxBarSize}\n            barGap={chartBarGap}\n            barCategoryGap={chartBarCategoryGap}\n            data={data}\n            margin={{\n              top: 40,\n              right: 0,\n              left: -10,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid\n              horizontal={true}\n              vertical={false}\n              strokeDasharray=\" \"\n              stroke=\"#E3F3FF\"\n            />\n\n            <XAxis\n              axisLine={false}\n              tickLine={false}\n              dataKey=\"name\"\n              fontSize={chartXAxisFontSiZe}\n              fontWeight={400}\n              tickMargin={10}\n            />\n            <YAxis\n              ticks={[0, 20, 40, 60, 80, 100]}\n              position=\"left\"\n              tickCount={6}\n              tickMargin={20}\n              fontSize={14}\n              fontWeight={500}\n              lineHeight={1.5}\n              axisLine={false}\n              tickLine={false}\n            >\n              <Label\n                position=\"top\"\n                dy={-24}\n                dx={-2}\n                fontSize={14}\n                fontWeight={600}\n                lineHeight={1.5}\n              >\n                Tasks\n              </Label>\n            </YAxis>\n\n            <Legend />\n\n            <defs>\n              <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0.8} />\n                <stop offset=\"100%\" stopColor=\"#FFD2DD\" stopOpacity={0} />\n              </linearGradient>\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n                <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0.8} />\n                <stop offset=\"100%\" stopColor=\"#3E85F3\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n\n            <Bar\n              dataKey=\"uv\"\n              fill=\"url(#colorUv)\"\n              legendType=\"none\"\n              barSize={chartbarSize}\n              minPointSize=\"3\"\n            >\n              <LabelList\n                dataKey=\"uv\"\n                position=\"top\"\n                fontSize={chartLabelListFontSize}\n                fontWeight={500}\n                lineHeight={chartLabelListlineHeight}\n                formatter={value => `${value}%`}\n              />\n            </Bar>\n\n            <Bar\n              dataKey=\"pv\"\n              fill=\"url(#colorPv)\"\n              legendType=\"none\"\n              barSize={chartbarSize}\n              minPointSize=\"3\"\n            >\n              <LabelList\n                dataKey=\"pv\"\n                position=\"top\"\n                fontSize={chartLabelListFontSize}\n                fontWeight={500}\n                lineHeight={chartLabelListlineHeight}\n                formatter={value => `${value}%`}\n              />\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </ContainerFirstWrapper>\n    </ContainerSecondWrapper>\n  );\n};\n\nexport default StatisticsChart;\n","import styled from 'styled-components';\n\nimport { device } from 'constants';\n\nexport const WrapperLegend = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 14px;\n \n\n  @media screen and (min-width: ${device.tablet}px) {\n    gap: 20px;\n    margin-bottom:0;\n    \n    \n  }\n`;\nexport const WrapperInner = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 8px;\n`;\n\n\n\nexport const Circle = styled.div`\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n`;\nexport const CircleDay = styled(Circle)`\n  background-color: #ffd2dd;\n`;\nexport const CircleMonth = styled(Circle)`\n  background-color: #3e85f3;\n`;\n\nexport const TextLegend = styled.p`\n  color: ${p => p.theme.secondaryTextColor};\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.28;\n  \n\n  @media screen and (min-width: ${device.tablet}px) {\n   \n       font-size: 16px;\n       line-height: 1.12;\n  }\n`;\n","import {\n  CircleDay,\n  CircleMonth,\n  WrapperLegend,\n  WrapperInner,\n  TextLegend,\n} from './StatisticsLegend.styled';\n\nconst Statisticslegend = () => {\n  return (\n    <>\n      <WrapperLegend>\n        <WrapperInner>\n          <CircleDay />\n          <TextLegend>By Day</TextLegend>\n        </WrapperInner>\n        <WrapperInner>\n          <CircleMonth />\n          <TextLegend>By Month</TextLegend>\n        </WrapperInner>\n      </WrapperLegend>\n    </>\n  );\n};\nexport default Statisticslegend;\n","import { useState } from 'react';\nimport StatisticsChart from '../StatisticsChart/StatisticsChart';\nimport PeriodPaginator from '../../../components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator';\n\nimport { ContainerSecond } from '../../../components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.styled';\n\nimport { WrapperPaginator } from './StatisticsPageComponent.styled';\n\nimport Statisticslegend from '../StatisticsLegend/StatisticsLegend';\n\nconst StatisticsPageComponent = () => {\n  const [date, setDate] = useState(new Date());\n  \n  const [isOpen, setIsOpen] = useState(false);\n \n  const changeDate = e => {\n    const newDate = new Date(date);\n\n      if (e.currentTarget.className.includes('decrease')) {\n      \n        newDate.setDate(newDate.getDate() - 1);\n      } else {\n        newDate.setDate(newDate.getDate() + 1);\n      }\n    setDate(newDate);\n    console.log(newDate);\n  };\n  return (\n    <>\n      <WrapperPaginator>\n        <ContainerSecond>\n          <PeriodPaginator\n            date={date}\n            getTasks={changeDate}\n            isOpen={isOpen}\n            setIsOpen={setIsOpen}\n            setDate={setDate}\n          />\n        </ContainerSecond>\n        <Statisticslegend />\n      </WrapperPaginator>\n      <StatisticsChart />\n    </>\n  );\n};\nexport default StatisticsPageComponent;\n","import { StatisticSection } from 'components/StatisticsPage/StatisticsPageComponent/StatisticsPageComponent.styled';\nimport { StatisticsPageComponent } from '../components/StatisticsPage';\n\nconst StatisticsPage = () => {\n  return (\n    <StatisticSection>\n      <StatisticsPageComponent />\n    </StatisticSection>\n  );\n};\nexport default StatisticsPage;\n"],"names":["StatisticSection","styled","_templateObject","_taggedTemplateLiteral","p","theme","secondaryBgColor","device","WrapperPaginator","_templateObject2","selectDate","state","date","currentDate","ContainerSecondWrapper","chartBorderColor","secondaryTextColor","ContainerFirstWrapper","dateStatistics","useSelector","todoByMonth","selectTasksByCategory","category","inprogressByMonth","doneByMonth","console","log","chartWidth","chartHeight","chartMaxBarSize","chartbarSize","chartBarGap","chartBarCategoryGap","chartLabelListFontSize","chartXAxisFontSiZe","chartLabelListlineHeight","todoByDay","filter","item","includes","inprogressByDay","doneByDay","todoByMonthCount","length","inprogressByMonthCount","doneByMonthCount","todoByDayCount","inprogressByDayCount","doneByDayCount","totalTasksByMonth","totalTasksByDay","todoByMonthPercentage","Number","toFixed","inprogressByMonthPercentage","doneByMonthPercentage","todoByDayPercentage","inprogressByDayPercentage","doneByDayPercentage","data","useMemo","name","uv","pv","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","handleResize","useEffect","addEventListener","removeEventListener","_jsx","children","ResponsiveContainer","width","height","_jsxs","BarChart","maxBarSize","barGap","barCategoryGap","margin","top","right","left","bottom","CartesianGrid","horizontal","vertical","strokeDasharray","stroke","XAxis","axisLine","tickLine","dataKey","fontSize","fontWeight","tickMargin","YAxis","ticks","position","tickCount","lineHeight","Label","dy","dx","Legend","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Bar","fill","legendType","barSize","minPointSize","LabelList","formatter","value","concat","WrapperLegend","WrapperInner","Circle","_templateObject3","CircleDay","_templateObject4","CircleMonth","_templateObject5","TextLegend","_templateObject6","_Fragment","Date","setDate","_useState3","_useState4","isOpen","setIsOpen","ContainerSecond","PeriodPaginator","getTasks","e","newDate","currentTarget","className","getDate","Statisticslegend","StatisticsChart","StatisticsPageComponent"],"sourceRoot":""}