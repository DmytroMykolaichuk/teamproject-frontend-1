{"version":3,"file":"static/js/461.ff03e362.chunk.js","mappings":"0RAwDA,UAhDqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,SAAO,IAAIC,KAAQ,cAEjCC,GAAoBC,EAAAA,EAAAA,SAASJ,EAAa,aAAc,IAAIE,MAC5DG,GAAmBC,EAAAA,EAAAA,SAAaH,GAChCI,GAAiBC,EAAAA,EAAAA,SAAWL,GAC5BM,GAAyBR,EAAAA,EAAAA,SAAOI,EAAkB,cAClDK,GAAuBT,EAAAA,EAAAA,SAAOM,EAAgB,cA2BpD,OAzBAI,EAAAA,EAAAA,YAAU,WAC0Cf,EAASgB,OAAS,IAClElB,EAAS,mBAADmB,OAAoBb,GAEhC,GAAG,CAACA,EAAaN,EAAUE,KAE3Be,EAAAA,EAAAA,YAAU,WACR,IAAMG,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEVzB,GAAS0B,EAAAA,EAAAA,IAAW,CACxBC,WAAYhB,EACZiB,SAAUhB,KACR,KAAD,EAAAW,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEHO,IAAAA,KAAU,CACRC,KAAM,QACNC,MAAO,UACPC,KAAM,wBACNC,mBAAoB,YACnB,wBAAAX,EAAAY,OAAA,GAAAd,EAAA,kBAEN,kBAdgB,OAAAJ,EAAAmB,MAAA,KAAAC,UAAA,KAejBrB,GACF,GAAG,CAAChB,EAAUY,EAAsBD,KAGlC2B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,KAChBD,EAAAA,EAAAA,KAACE,EAAAA,SAAQ,CAACC,UAAUH,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eAAiBA,UACxCC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,QAIf,C","sources":["pages/CalendarPage.js"],"sourcesContent":["import { Suspense, useEffect } from 'react';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { startOfMonth, endOfMonth, format, parseISO } from 'date-fns';\nimport Swal from 'sweetalert2';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { CalendarToolbar } from '../components/CalendarPage/index';\n\nconst CalendarPage = () => {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const dispatch = useDispatch();\n\n  const currentDate = format(new Date(), 'yyyy-MM-dd');\n\n  const currentDateObject = parseISO(currentDate, 'yyyy-MM-dd', new Date());\n  const startOfMonthDate = startOfMonth(currentDateObject);\n  const endOfMonthDate = endOfMonth(currentDateObject);\n  const formatedStartMonthDate = format(startOfMonthDate, 'yyyy-MM-dd');\n  const formatedEndMonthDate = format(endOfMonthDate, 'yyyy-MM-dd');\n\n  useEffect(() => {\n    if ((pathname === \"/calendar\" || \"/calendar/\") && pathname.length < 11) {\n      navigate(`/calendar/month/${currentDate}`);\n    }\n  }, [currentDate, navigate, pathname]);\n\n  useEffect(() => {\n    const getAllTasks = async () => {\n      try {\n        await dispatch(fetchTasks({\n          monthStart: formatedStartMonthDate,\n          monthEnd: formatedEndMonthDate,\n        }));\n      } catch (error) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Something went wrong!',\n          confirmButtonColor: '#3E85F3',\n        });\n      }\n    };\n    getAllTasks();\n  }, [dispatch, formatedEndMonthDate, formatedStartMonthDate]);\n\n  return (\n    <>\n      <CalendarToolbar />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["navigate","useNavigate","pathname","useLocation","dispatch","useDispatch","currentDate","format","Date","currentDateObject","parseISO","startOfMonthDate","startOfMonth","endOfMonthDate","endOfMonth","formatedStartMonthDate","formatedEndMonthDate","useEffect","length","concat","getAllTasks","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetchTasks","monthStart","monthEnd","t0","Swal","icon","title","text","confirmButtonColor","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","CalendarToolbar","Suspense","fallback","Outlet"],"sourceRoot":""}